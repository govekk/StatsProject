var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 20
k <- 10
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- median(sample_values) + mean(sample_values) -1 # do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 20
k <- 10
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- median(sample_values) + mean(sample_values) - min(sample_values)# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 20
k <- 10
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- median(sample_values) + mean(sample_values) - 2*min(sample_values)# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 20
k <- 10
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- median(sample_values) + mean(sample_values) - min(sample_values)^2# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 20
k <- 10
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- median(sample_values) + mean(sample_values) - log(k)*min(sample_values)# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 20
k <- 10
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- median(sample_values) + mean(sample_values) - 7 # do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 20
k <- 10
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- median(sample_values) + mean(sample_values) - log(min(sample_values)) # do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 20000
k <- 100
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- median(sample_values) + mean(sample_values) - log(min(sample_values)) # do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 20000
k <- 100
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- max(sample_values)^log(k) - min(sample_values)^log(k)
# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 200
k <- 10
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- max(sample_values)^log(k) - min(sample_values)^log(k)
# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 200
k <- 10
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- 2*median(sample_values) - 1
# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 200
k <- 10
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- max(sample_values) + min(sample_values) - 1
# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 20000
k <- 1000
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- max(sample_values) + min(sample_values) - 1
# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 2000
k <- 100
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- max(sample_values) + min(sample_values) - 1
# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 200
k <- 100
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- max(sample_values) + min(sample_values) - 1
# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
set.seed(175)
N <- 200
k <- 10
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- max(sample_values) + min(sample_values) - 1
# do something here!!!
}
# Mean squared error of MoM estimator
var(mom_statistic) + (mean(mom_statistic) - N)^2
# Mean squared error of ML estimator
var(mle_statistic) + (mean(mle_statistic) - N)^2
# Mean squared error of first custom estimator
var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# Mean squared error of second custom estimator
var(custom2_statistic) + (mean(custom2_statistic) - N)^2
help("data.frame")
help(apply)
help(gather)
library(dplyr)
help(gather)
library(tidyr)
help(gather)
library(ggplot2)
simulation <- function(N_input, k_input) {
N <- N_input
k <- k_input
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- max(sample_values) + min(sample_values) - 1
}
mse <- function(statistic) {
return(var(statistic) + (mean(statistic) - N)^2)
}
bias <- function(statistic) {
return(mean(statistic) - N)
}
stats <- c(mom_statistic, mle_statistic, custom1_statistic, custom2_statistic)
mse_list <- lapply(stats, FUN = mse)
var_list <- lapply(stats, FUN = var)
bias_list <- lapply(stats, FUN = bias)
params <- data.frame(mse = mse_list, var = var_list, bias = bias_list)
params <- gather(params, key = stat, value = count, mse, var, bias)
# # Mean squared error of MoM estimator
# mse_mom <- var(mom_statistic) + (mean(mom_statistic) - N)^2
# # Mean squared error of ML estimator
# mse_mle <- var(mle_statistic) + (mean(mle_statistic) - N)^2
# # Mean squared error of first custom estimator
# mse_c1 <- var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# # Mean squared error of second custom estimator
# mse_c2 <- var(custom2_statistic) + (mean(custom2_statistic) - N)^2
data <- data.frame(mom = mom_statistic, mle = mle_statistic,
custom1 = custom1_statistic, custom2 = custom2_statistic)
ggplot() +
geom_line(params, aes(x = stat, y = count, color = stat))
}
simulation(200, 10)
library(ggplot2)
library(tidyr)
simulation <- function(N_input, k_input) {
N <- N_input
k <- k_input
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- max(sample_values) + min(sample_values) - 1
}
mse <- function(statistic) {
return(var(statistic) + (mean(statistic) - N)^2)
}
bias <- function(statistic) {
return(mean(statistic) - N)
}
stats <- c(mom_statistic, mle_statistic, custom1_statistic, custom2_statistic)
mse_list <- lapply(stats, FUN = mse)
var_list <- lapply(stats, FUN = var)
bias_list <- lapply(stats, FUN = bias)
params <- data.frame(mse = mse_list, var = var_list, bias = bias_list)
params <- gather(params, key = stat, value = count, mse, var, bias)
# # Mean squared error of MoM estimator
# mse_mom <- var(mom_statistic) + (mean(mom_statistic) - N)^2
# # Mean squared error of ML estimator
# mse_mle <- var(mle_statistic) + (mean(mle_statistic) - N)^2
# # Mean squared error of first custom estimator
# mse_c1 <- var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# # Mean squared error of second custom estimator
# mse_c2 <- var(custom2_statistic) + (mean(custom2_statistic) - N)^2
data <- data.frame(mom = mom_statistic, mle = mle_statistic,
custom1 = custom1_statistic, custom2 = custom2_statistic)
ggplot() +
geom_line(params, aes(x = stat, y = count, color = stat))
}
simulation(200, 10)
library(ggplot2)
library(tidyr)
simulation <- function(N_input, k_input) {
N <- N_input
k <- k_input
runs <- 10000
mom_statistic <- numeric(runs)
mle_statistic <- numeric(runs)
custom1_statistic <- numeric(runs)
custom2_statistic <- numeric(runs)
for(i in 1:runs) {
sample_values <- sample(1:N, k)
mom_statistic[i] <- 2*mean(sample_values) - 1
mle_statistic[i] <- max(sample_values)
custom1_statistic[i] <- max(sample_values) + (max(sample_values)^(k+1) + k)/((k+1)*max(sample_values)^k)
custom2_statistic[i] <- max(sample_values) + min(sample_values) - 1
}
mse <- function(statistic) {
return(var(statistic) + (mean(statistic) - N)^2)
}
bias <- function(statistic) {
return(mean(statistic) - N)
}
stats <- c(mom_statistic, mle_statistic, custom1_statistic, custom2_statistic)
mse_list <- lapply(stats, FUN = mse)
var_list <- lapply(stats, FUN = var)
bias_list <- lapply(stats, FUN = bias)
params <- data.frame(mse = mse_list, var = var_list, bias = bias_list)
params <- tidyr::gather(params, key = stat, value = count, mse, var, bias)
# # Mean squared error of MoM estimator
# mse_mom <- var(mom_statistic) + (mean(mom_statistic) - N)^2
# # Mean squared error of ML estimator
# mse_mle <- var(mle_statistic) + (mean(mle_statistic) - N)^2
# # Mean squared error of first custom estimator
# mse_c1 <- var(custom1_statistic) + (mean(custom1_statistic) - N)^2
# # Mean squared error of second custom estimator
# mse_c2 <- var(custom2_statistic) + (mean(custom2_statistic) - N)^2
data <- data.frame(mom = mom_statistic, mle = mle_statistic,
custom1 = custom1_statistic, custom2 = custom2_statistic)
ggplot() +
geom_line(params, aes(x = stat, y = count, color = stat))
}
simulation(200, 10)
